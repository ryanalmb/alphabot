version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://api:3001
      - NEXT_PUBLIC_WS_URL=ws://api:3001
      - NEXT_PUBLIC_SOLANA_NETWORK=devnet
      - NEXT_PUBLIC_PROGRAM_ID=AlphaPackCoreProgram111111111111111111111
    depends_on:
      - api
    networks:
      - alphapack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://alphapack:alphapack123@postgres:5432/alphapack
      - REDIS_URL=redis://redis:6379
      - SOLANA_RPC_ENDPOINT=https://api.devnet.solana.com
      - AWS_REGION=us-east-1
      - USER_TABLE_NAME=alphapack-users-dev
      - PACK_TABLE_NAME=alphapack-packs-dev
      - COMPETITION_TABLE_NAME=alphapack-competitions-dev
      - TRADING_QUEUE_URL=https://sqs.us-east-1.amazonaws.com/123456789012/alphapack-trading-dev
      - ML_ENDPOINT_NAME=alphapack-ml-dev
    depends_on:
      - postgres
      - redis
    networks:
      - alphapack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    environment:
      - NODE_ENV=production
      - API_URL=http://api:3001
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - WEBHOOK_URL=${WEBHOOK_URL}
    depends_on:
      - api
    networks:
      - alphapack-network
    restart: unless-stopped

  # Trading Engine
  trading-engine:
    build:
      context: .
      dockerfile: Dockerfile.trading
    environment:
      - NODE_ENV=production
      - AWS_REGION=us-east-1
      - SOLANA_RPC_ENDPOINT=https://api.devnet.solana.com
      - TRADING_QUEUE_URL=https://sqs.us-east-1.amazonaws.com/123456789012/alphapack-trading-dev
      - ML_ENDPOINT_NAME=alphapack-ml-dev
    depends_on:
      - redis
    networks:
      - alphapack-network
    restart: unless-stopped

  # Social Engine
  social-engine:
    build:
      context: .
      dockerfile: Dockerfile.social
    environment:
      - NODE_ENV=production
      - AWS_REGION=us-east-1
      - SOCIAL_QUEUE_URL=https://sqs.us-east-1.amazonaws.com/123456789012/alphapack-social-dev
      - ML_ENDPOINT_NAME=alphapack-ml-dev
    depends_on:
      - redis
    networks:
      - alphapack-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=alphapack
      - POSTGRES_USER=alphapack
      - POSTGRES_PASSWORD=alphapack123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - alphapack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alphapack"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass alphapack123
    volumes:
      - redis_data:/data
    networks:
      - alphapack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api
    networks:
      - alphapack-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - alphapack-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=alphapack123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - alphapack-network
    restart: unless-stopped

  # Solana Validator (Local Development)
  solana-validator:
    image: solanalabs/solana:v1.16.0
    ports:
      - "8899:8899"
      - "8900:8900"
    command: >
      sh -c "
        solana-test-validator
        --rpc-port 8899
        --rpc-bind-address 0.0.0.0
        --faucet-port 9900
        --faucet-sol 1000000
        --reset
        --quiet
      "
    volumes:
      - solana_data:/root/.config/solana
    networks:
      - alphapack-network
    restart: unless-stopped
    profiles:
      - local-dev

  # ML Model Server
  ml-server:
    build:
      context: ./ml
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./ml/models:/app/models
    depends_on:
      - redis
    networks:
      - alphapack-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  solana_data:
    driver: local

networks:
  alphapack-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
