name: üöÄ Alpha Pack Pro - Optimized Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 645634482532
  ECR_BASE_REPOSITORY: alpha-pack-base
  ECR_MAIN_REPOSITORY: alpha-pack-pro
  ECS_CLUSTER: alpha-pack-pro-v2
  ECS_SERVICE: alpha-pack-service
  CONTAINER_NAME: alpha-pack-container

jobs:
  # -----------------------------------------------------------------------------
  # BUILD BASE IMAGE (Only when dependencies change)
  # -----------------------------------------------------------------------------
  build-base:
    name: üèóÔ∏è Build Base Dependencies
    runs-on: ubuntu-latest
    outputs:
      base-image-exists: ${{ steps.check-base.outputs.exists }}
      base-image-uri: ${{ steps.build-base.outputs.image-uri }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: üîç Check if base image exists
      id: check-base
      run: |
        PACKAGE_HASH=$(sha256sum package*.json | sha256sum | cut -d' ' -f1 | cut -c1-12)
        BASE_TAG="base-${PACKAGE_HASH}"
        
        if aws ecr describe-images --repository-name $ECR_BASE_REPOSITORY --image-ids imageTag=$BASE_TAG --region $AWS_REGION >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "image-uri=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BASE_REPOSITORY:$BASE_TAG" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: üèóÔ∏è Build and push base image
      id: build-base
      if: steps.check-base.outputs.exists == 'false'
      run: |
        PACKAGE_HASH=$(sha256sum package*.json | sha256sum | cut -d' ' -f1 | cut -c1-12)
        BASE_TAG="base-${PACKAGE_HASH}"
        BASE_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BASE_REPOSITORY:$BASE_TAG"
        
        # Login to ECR
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        
        # Build base image
        docker build --target base-dependencies -f Dockerfile.production -t $BASE_IMAGE_URI .
        
        # Push base image
        docker push $BASE_IMAGE_URI
        
        echo "image-uri=$BASE_IMAGE_URI" >> $GITHUB_OUTPUT

  # -----------------------------------------------------------------------------
  # BUILD APPLICATION IMAGE (Fast build using cached base)
  # -----------------------------------------------------------------------------
  build-app:
    name: üöÄ Build Application
    runs-on: ubuntu-latest
    needs: build-base
    outputs:
      image-uri: ${{ steps.build-app.outputs.image-uri }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: üèóÔ∏è Build and push application image
      id: build-app
      run: |
        COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-7)
        APP_TAG="app-${COMMIT_HASH}"
        APP_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_MAIN_REPOSITORY:$APP_TAG"
        
        # Get base image URI
        BASE_IMAGE_URI="${{ needs.build-base.outputs.base-image-uri }}"
        if [ -z "$BASE_IMAGE_URI" ]; then
          PACKAGE_HASH=$(sha256sum package*.json | sha256sum | cut -d' ' -f1 | cut -c1-12)
          BASE_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BASE_REPOSITORY:base-${PACKAGE_HASH}"
        fi
        
        # Login to ECR
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        
        # Build application image using cached base
        docker build --build-arg BASE_IMAGE=$BASE_IMAGE_URI -f Dockerfile.production -t $APP_IMAGE_URI .
        
        # Push application image
        docker push $APP_IMAGE_URI
        
        # Tag as latest
        docker tag $APP_IMAGE_URI $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_MAIN_REPOSITORY:latest
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_MAIN_REPOSITORY:latest
        
        echo "image-uri=$APP_IMAGE_URI" >> $GITHUB_OUTPUT

  # -----------------------------------------------------------------------------
  # DEPLOY TO ECS (30-second deployment)
  # -----------------------------------------------------------------------------
  deploy:
    name: üöÄ Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-app
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: üöÄ Deploy to ECS
      run: |
        APP_IMAGE_URI="${{ needs.build-app.outputs.image-uri }}"
        
        # Update task definition with new image
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition alpha-pack-optimized --query taskDefinition)
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$APP_IMAGE_URI" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
        
        # Register new task definition
        NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition --cli-input-json file:///dev/stdin --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update ECS service (if exists) or run task
        if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].serviceName' --output text 2>/dev/null; then
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEF_ARN
        else
          # Run task directly
          aws ecs run-task \
            --cluster $ECS_CLUSTER \
            --task-definition $NEW_TASK_DEF_ARN \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-02263f1b6dea30d43],securityGroups=[sg-06650db42c9498284],assignPublicIp=ENABLED}"
        fi
        
        echo "‚úÖ Deployment complete!"
        echo "üåê Application deployed with image: $APP_IMAGE_URI"
