# =============================================================================
# ALPHA PACK PRO - OPTIMIZED MULTI-STAGE DOCKERFILE
# Reduces deployment time from 30-60 minutes to 2-5 minutes
# =============================================================================

# -----------------------------------------------------------------------------
# STAGE 1: BASE DEPENDENCIES (CACHED LAYER)
# This stage is cached and only rebuilds when package.json changes
# -----------------------------------------------------------------------------
FROM node:18-bullseye AS dependencies

# Set working directory
WORKDIR /app

# Install system dependencies (cached layer)
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    python3 \
    python3-pip \
    build-essential \
    pkg-config \
    libxi-dev \
    libxext-dev \
    libx11-dev \
    mesa-common-dev \
    libgl1-mesa-dev \
    curl \
    locales \
    && locale-gen en_US.UTF-8 \
    && ln -sf /usr/bin/python3 /usr/bin/python \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set locale environment
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# Configure npm for optimal performance
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NPM_CONFIG_REGISTRY="https://registry.npmjs.org/"
RUN npm config set fetch-timeout 300000 \
    && npm config set fetch-retry-mintimeout 20000 \
    && npm config set fetch-retry-maxtimeout 120000

# Copy package files (triggers rebuild only when dependencies change)
COPY package*.json ./

# Install ALL dependencies (cached layer - only rebuilds when package.json changes)
RUN npm ci --silent --no-audit --no-fund

# -----------------------------------------------------------------------------
# STAGE 2: BUILD STAGE (ONLY REBUILDS WHEN CODE CHANGES)
# This stage builds the React frontend
# -----------------------------------------------------------------------------
FROM dependencies AS builder

# Copy source code
COPY . .

# Build React frontend (only when source code changes)
RUN npm run build

# -----------------------------------------------------------------------------
# STAGE 3: PRODUCTION RUNTIME (MINIMAL, FAST STARTUP)
# This stage creates the final optimized container
# -----------------------------------------------------------------------------
FROM node:18-bullseye-slim AS runtime

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Copy built application from previous stages
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=builder /app/build ./build
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/app.js ./
COPY --from=builder /app/telegram-bot.js ./
COPY --from=builder /app/services ./services
COPY --from=builder /app/frontend ./frontend

# Create non-root user for security
RUN groupadd -r alphapack && useradd -r -g alphapack alphapack
RUN chown -R alphapack:alphapack /app
USER alphapack

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=300s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["node", "app.js"]
